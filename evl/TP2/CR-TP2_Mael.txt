Compte rendu du TP2:

1. On constate que le code assembleur généré n'est pas modifié après renommage des variables dans le code source.

2.
  1)
  #include <stdio.h>

  int main() {

  		int i,j,s,t;

  		i=1/5;
  		j=1%5;
  		s=0/5;
  		t=0%5;
  		while ((i*5+j)<15) {
  				s=(s*5+t)+(i*5+j);
  				t=s%5;
  				s=s/5;
  				i=(i*5+j)+1;
  				j=i%5;
  				i=i/5;
  		}
  		printf("résultat vaut %i.\n",(s*5+t));

  		return 0;
  }

  2) Le code assembleur généré par le programme obfusqué est beaucoup plus long
  que le code du programme initial. Il est aussi plus complexe grâce aux multiplications,
  divisions et modulo.

  3)
  #include <stdio.h>

  int main() {

  		int i,j,s,t;

  		i=1/5;
  		t=0%5;
  		j=1%5;
  		s=0/5;
  		while ((i*5+j)<15) {
  				s=(s*5+t)+(i*5+j);
  				i=(i*5+j)+1;
  				j=i%5;
  				t=s%5;
  				i=i/5;
  				s=s/5;
  		}
  		printf("résultat vaut %i.\n",(s*5+t));

  		return 0;
  }

  4)
  #include <stdio.h>

  int test(int i,int j,int s,int t){
  		if ((i*5+j+s*5+t)>=0)
  				return 1;
  		return 0;
  }

  int main() {

  		int i,j,s,t;

  		i=1/5;
  		t=0%5;
  		j=1%5;
  		s=0/5;
  		while ((i*5+j)<15) {
  				s=(s*5+t)+(i*5+j);
  				i=(i*5+j)+1;
  				j=i%5;
  				t=s%5;
  				i=i/5;
  				s=s/5;
  				if(test(i,j,s,t)) {
  						int tmp=i;
  						i=j;
  						j=i;
  						i=tmp;
  				} else {
  						int tmp=s;
  						s=t;
  						t=s;
  						s=tmp;
  				}
  		}
  		printf("résultat vaut %i.\n",(s*5+t));

  		return 0;
  }

3.
  1)
  #include <stdio.h>

  int main () {

  		int v = 7*6;

  		v = v*5*6;
  		if (v<2*6) v = v-7*6; else v = v+7*6;
  		while (v<50*6) v++;

  		printf("v vaut %i.\n",v);

  		return 0;
  }

  Non, le programme se comporte différement puisqu'on change les valeurs en les
  multipliant par 6.

  2)
  #include <stdio.h>

  int main () {

  		int v = 7*6;

  		v = (v/6)*5*6;
  		if ((v/6)<2*6) v = (v/6)-7*6; else v = (v/6)+7*6;
  		while ((v/6)<50*6) {
  				v++;
  		}
  		printf("v vaut %i.\n",(v/6)/6);

  		return 0;
  }

  3)
  #include <stdio.h>

  int encode (int i) {
    return i*6;
  }

  int decode (int i) {
    return i/6;
  }

  int main () {

    int x = encode(7);
    int v = encode(6);
    v = decode(x) * decode(v);
    x = v + decode(x);
    printf("x vaut %i.\n",x);

    return 0;
  }

  Il suffit de s'assurer que chaque variable est encodé autant de fois qu'il est
  décodé à chaque utilisation.

  4)
